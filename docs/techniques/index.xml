<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Techniques on Tech radar</title>
    <link>https://zupit.github.io/opensource-tech-radar/techniques/</link>
    <description>Recent content in Techniques on Tech radar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://zupit.github.io/opensource-tech-radar/techniques/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://zupit.github.io/opensource-tech-radar/techniques/bdd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/opensource-tech-radar/techniques/bdd/</guid>
      <description>What is it ? In software engineering, behavior-driven development is an agile software development process that encourages collaboration among developers, quality assurance testers, and customer representatives in a software project.
Why ? In software engineering, behavior-driven development (BDD) is an agile software development process that encourages collaboration among developers, quality assurance testers, and customer representatives in a software project. &amp;hellip; The tools serve to add automation to the ubiquitous language that is a central theme of BDD.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zupit.github.io/opensource-tech-radar/techniques/c4-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/opensource-tech-radar/techniques/c4-model/</guid>
      <description>What is it ? C4 stands for context, containers, components, and code — a set of hierarchical diagrams that you can use to describe your software architecture at different zoom levels, each useful for different audiences.
Why ? The C4 model is a simple way to communicate software architecture at different levels of abstraction, so that you can tell different stories to different audiences. It&amp;rsquo;s also a way to introduce (often, reintroduce) some rigour and lightweight modelling to software development teams.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zupit.github.io/opensource-tech-radar/techniques/cdd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/opensource-tech-radar/techniques/cdd/</guid>
      <description>What is it ? Why ? For who ?  CharlesCD Horusec Ritchie CLI Beagle Framework  Resources Resources(Portuguese)  Cognitive-Driven Development (CDD): proposta de design orientado ao entendimento  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://zupit.github.io/opensource-tech-radar/techniques/clean-architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/opensource-tech-radar/techniques/clean-architecture/</guid>
      <description>What is it ? Clean architecture is a software design philosophy that separates the elements of a design into ring levels. The main rule of clean architecture is that code dependencies can only move from the outer levels inward. Code on the inner layers can have no knowledge of functions on the outer layers.
Why ? Clean architecture is a way of structuring or separating your code so that what your app does, how your app do what it does and how your app display what he did, are separate and has no dependencies on each other.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zupit.github.io/opensource-tech-radar/techniques/ddd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/opensource-tech-radar/techniques/ddd/</guid>
      <description>What is it ? Domain-driven design is the concept that the structure and language of software code should match the business domain. For example, if a software processes loan applications, it might have classes such as LoanApplication and Customer, and methods such as AcceptOffer and Withdraw.
Why ? Overall, DDD is worth learning because it simplifies one factor that is complex in every professional relationship: communication. DDD allows developers, domain experts, DBAs, business owners, and (most importantly) clients to communicate effectively with each other in order to solve problems.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zupit.github.io/opensource-tech-radar/techniques/grpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/opensource-tech-radar/techniques/grpc/</guid>
      <description>What is it ? gRPC is an open source remote procedure call system initially developed at Google in 2015 as the next generation of the RPC infrastructure Stubby.
Why ? gRPC uses HTTP/2 to support highly performant and scalable API&amp;rsquo;s and makes use of binary data rather than just text which makes the communication more compact and more efficient. gRPC makes better use of HTTP/2 then REST. gRPC for example makes it possible to turn-off message compression.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zupit.github.io/opensource-tech-radar/techniques/microservices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/opensource-tech-radar/techniques/microservices/</guid>
      <description>What is it ? Microservice architecture – a variant of the service-oriented architecture structural style – arranges an application as a collection of loosely-coupled services. In a microservices architecture, services are fine-grained and the protocols are lightweight.
Why ? With microservices, multiple teams work on independent services, enabling you to deploy more quickly — and pivot more easily when you need to. Development time is reduced, and your teams&#39; code will be more reusable.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zupit.github.io/opensource-tech-radar/techniques/okr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/opensource-tech-radar/techniques/okr/</guid>
      <description>What is it ? Objectives and key results is a goal-setting framework for defining and tracking objectives and their outcomes.
Why ? OKRs (objectives and key results) can help you achieve those goals—no matter what kind they are. Whether you are looking to improve your individual goals, your company goals, or are suggesting a new management tool to other leadership, OKRs will work. &amp;hellip; The OKR process helps turn good ideas into great execution.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zupit.github.io/opensource-tech-radar/techniques/server-driven-ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/opensource-tech-radar/techniques/server-driven-ui/</guid>
      <description>What is it ? Microservice architecture – a variant of the service-oriented architecture structural style – arranges an application as a collection of loosely-coupled services. In a microservices architecture, services are fine-grained and the protocols are lightweight.
Why ? With microservices, multiple teams work on independent services, enabling you to deploy more quickly — and pivot more easily when you need to. Development time is reduced, and your teams&#39; code will be more reusable.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zupit.github.io/opensource-tech-radar/techniques/six-pagers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/opensource-tech-radar/techniques/six-pagers/</guid>
      <description>What is it ? The memo-style of presentation is designed—contra forms like PowerPoint—to make presenting new ideas difficult for the presenter but easier for their audience. &amp;hellip; At Amazon, the memo format allows every meeting where ideas are presented to turn into a deep debate of the idea&amp;rsquo;s relative costs and merits.
Why ? We currently use this style in all our open source projects. The objective is to have a clear and objective vision of what our projects are capable of, objectives, values and lessons learned in a summarized way.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zupit.github.io/opensource-tech-radar/techniques/tdd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zupit.github.io/opensource-tech-radar/techniques/tdd/</guid>
      <description>What is it ? Test-driven development (TDD) is a software development process that relies on the repetition of a very short development cycle: requirements are turned into very specific test cases, then the software is improved to pass the new tests, only.
Why ? TDD promotes a test-then-code approach. It’s based on the idea that if developers use test cases before writing functionality, they can create better software and, often, complete the project faster.</description>
    </item>
    
  </channel>
</rss>
